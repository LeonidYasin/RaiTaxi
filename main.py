"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ –†–∞–π-–¢–∞–∫—Å–∏
"""

import asyncio
import logging
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from config import Config
from database.models import DatabaseManager
from database.operations import UserOperations, OrderOperations, DriverOperations
from handlers.client import ClientHandlers, router as client_router
from handlers.driver import DriverHandlers, router as driver_router
from handlers.admin import AdminHandlers, router as admin_router
from utils.rate_limiter import RateLimiter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class RaiTaxiBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –†–∞–π-–¢–∞–∫—Å–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            Config.validate()
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db_manager = DatabaseManager(Config.DATABASE_PATH)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
        self.user_ops = UserOperations(self.db_manager)
        self.order_ops = OrderOperations(self.db_manager)
        self.driver_ops = DriverOperations(self.db_manager)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.client_handlers = ClientHandlers(self.user_ops, self.order_ops)
        self.driver_handlers = DriverHandlers(self.user_ops, self.order_ops, self.driver_ops)
        self.admin_handlers = AdminHandlers(self.user_ops, self.order_ops, self.driver_ops)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
        self.rate_limiter = RateLimiter()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        self._register_routers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        from handlers.client import set_operations
        set_operations(self.user_ops, self.order_ops)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        self._register_middleware()
    
    def _register_routers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        self.dp.include_router(client_router)
        self.dp.include_router(driver_router)
        self.dp.include_router(admin_router)
        
        logger.info("–†–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _register_middleware(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.
        pass
    
    async def on_startup(self, webhook_url: str = None):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        logger.info("üöó –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –†–∞–π-–¢–∞–∫—Å–∏...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if await self.db_manager.connect():
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if webhook_url:
            await self.bot.set_webhook(url=webhook_url)
            logger.info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω)
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ
            pass
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
        
        logger.info("üöÄ –ë–æ—Ç –†–∞–π-–¢–∞–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        return True
    
    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –†–∞–π-–¢–∞–∫—Å–∏...")
        
        # –£–¥–∞–ª—è–µ–º webhook
        await self.bot.delete_webhook()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.db_manager.disconnect()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await self.bot.session.close()
        
        logger.info("‚úÖ –ë–æ—Ç –†–∞–π-–¢–∞–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            await self.on_startup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            await self.on_shutdown()
    
    async def start_webhook(self, webhook_url: str, webhook_path: str = "/webhook"):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            await self.on_startup(webhook_url)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
            app = web.Application()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            webhook_handler = SimpleRequestHandler(
                dispatcher=self.dp,
                bot=self.bot
            )
            webhook_handler.register(app, path=webhook_path)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            web.run_app(app, host="0.0.0.0", port=8000)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")
        finally:
            await self.on_shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = RaiTaxiBot()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    if len(sys.argv) > 1 and sys.argv[1] == "--webhook":
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook
        webhook_url = sys.argv[2] if len(sys.argv) > 2 else "https://your-domain.com/webhook"
        await bot.start_webhook(webhook_url)
    else:
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        await bot.start_polling()

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
