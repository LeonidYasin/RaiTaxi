"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –†–∞–π-–¢–∞–∫—Å–∏
"""

from aiogram import Router, F, Bot
import io
import asyncio
import time
from aiogram.types import Message, CallbackQuery, Location, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.operations import UserOperations, OrderOperations
from services.price_calculator import PriceCalculator
from utils.maps import MapService
from utils.rate_limiter import TaxiOrderLimiter, DeliveryOrderLimiter
from config import Config

router = Router()

class TaxiOrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏"""
    waiting_for_pickup = State()
    waiting_for_destination = State()
    confirming_order = State()
    searching_for_driver = State()

class DeliveryOrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    waiting_for_description = State()
    waiting_for_pickup = State()
    waiting_for_destination = State()
    confirming_order = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –ë–î
user_ops = None
order_ops = None

def set_operations(user_operations: UserOperations, order_operations: OrderOperations, bot_instance: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global user_ops, order_ops, bot
    user_ops = user_operations
    order_ops = order_operations
    bot = bot_instance

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = await user_ops.get_user_by_telegram_id(user.id)
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_ops.create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª–µ–º
    user_db_id = await user_ops.get_user_id_by_telegram_id(user.id)
    is_driver = False
    if user_db_id:
        from database.operations import DriverOperations
        driver_ops = DriverOperations(user_ops.db)
        driver = await driver_ops.get_driver_by_user_id(user_db_id)
        is_driver = driver is not None
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text=Config.BUTTONS['taxi'], callback_data="order_taxi")
    builder.button(text=Config.BUTTONS['delivery'], callback_data="order_delivery")
    builder.button(text=Config.BUTTONS['my_orders'], callback_data="my_orders")
    builder.button(text=Config.BUTTONS['profile'], callback_data="profile")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–æ–¥–∏—Ç–µ–ª—å
    if not is_driver:
        builder.button(text=Config.BUTTONS['become_driver'], callback_data="become_driver")
    else:
        builder.button(text=Config.BUTTONS['driver_panel'], callback_data="driver_panel")
    
    builder.button(text=Config.BUTTONS['help'], callback_data="help")
    
    builder.adjust(2, 2, 1, 1)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
    if is_driver:
        welcome_message = Config.MESSAGES['welcome']
    else:
        welcome_message = Config.MESSAGES['welcome_with_driver_invite']
    
    await message.answer(
        welcome_message,
        reply_markup=builder.as_markup()
    )

@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    await show_help(message)

@router.message(Command("profile"))
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
    await show_profile(message)

@router.message(Command("my_orders"))
async def my_orders_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_orders"""
    await show_my_orders(message)

@router.message(Command("taxi"))
async def taxi_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /taxi"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è state, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback
    await message.answer(
        "üöï –î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("delivery"))
async def delivery_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delivery"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è state, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback
    await message.answer(
        "üì¶ –î–ª—è –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("driver"))
async def driver_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /driver"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è state, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback
    await message.answer(
        "üöó –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è state, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∞ –Ω–µ callback
    await message.answer(
        "üëë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("menu"))
async def menu_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await start_command(message)

@router.message(Command("info"))
async def info_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    info_text = "üöó –†–∞–π-–¢–∞–∫—Å–∏ - –í–∞—à —Å–æ—Å–µ–¥—Å–∫–∏–π –≤–æ–¥–∏—Ç–µ–ª—å!\n\n"
    info_text += "‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
    info_text += "‚Ä¢ üöï –ë—ã—Å—Ç—Ä–æ–µ —Ç–∞–∫—Å–∏ –ø–æ —Ä–∞–π–æ–Ω—É\n"
    info_text += "‚Ä¢ üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤\n"
    info_text += "‚Ä¢ üè† –†–∞–±–æ—Ç–∞–µ–º –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ\n"
    info_text += "‚Ä¢ üí∞ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Ü–µ–Ω—ã\n"
    info_text += "‚Ä¢ ‚≠ê –ù–∞–¥–µ–∂–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏\n\n"
    info_text += "üì± –ö–æ–º–∞–Ω–¥—ã:\n"
    info_text += "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    info_text += "‚Ä¢ /taxi - –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏\n"
    info_text += "‚Ä¢ /delivery - –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n"
    info_text += "‚Ä¢ /driver - –°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º\n"
    info_text += "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n"
    info_text += "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
    info_text += "üí° –î–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
    
    await message.answer(info_text, reply_markup=get_main_menu_keyboard())

@router.message(Command("about"))
async def about_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /about - –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    about_text = "üöó –û –ø—Ä–æ–µ–∫—Ç–µ –†–∞–π-–¢–∞–∫—Å–∏\n\n"
    about_text += "üéØ –ú–∏—Å—Å–∏—è:\n"
    about_text += "–°–æ–∑–¥–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç–∞–∫—Å–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏\n\n"
    about_text += "üí° –§–∏–ª–æ—Å–æ—Ñ–∏—è:\n"
    about_text += "‚Ä¢ üè† –°–æ—Å–µ–¥—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥\n"
    about_text += "‚Ä¢ üöó –ö–æ–º—Ñ–æ—Ä—Ç –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
    about_text += "‚Ä¢ üí∞ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–µ —Ü–µ–Ω—ã\n"
    about_text += "‚Ä¢ ‚≠ê –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ\n\n"
    about_text += "üåç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:\n"
    about_text += "–†–∞–±–æ—Ç–∞–µ–º –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –∏ –ø–æ—Å–µ–ª–∫–∞—Ö –†–æ—Å—Å–∏–∏\n\n"
    about_text += "üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
    about_text += "‚Ä¢ Telegram Bot API\n"
    about_text += "‚Ä¢ Python + SQLite\n"
    about_text += "‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n"
    about_text += "‚Ä¢ –ë–µ–∑ –æ–±–ª–∞—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n\n"
    about_text += "üîÑ –í–µ—Ä—Å–∏—è: 1.0.0\n"
    about_text += "üìÖ 2025 –≥–æ–¥"
    
    await message.answer(about_text, reply_markup=get_main_menu_keyboard())

@router.message(Command("support"))
async def support_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support - –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
    support_text = "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –†–∞–π-–¢–∞–∫—Å–∏\n\n"
    support_text += "üìû –°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:\n"
    support_text += "‚Ä¢ üí¨ Telegram: @admin_username\n"
    support_text += "‚Ä¢ üìß Email: support@raitaxi.ru\n"
    support_text += "‚Ä¢ üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n\n"
    support_text += "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    support_text += "‚Ä¢ –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏? - /help\n"
    support_text += "‚Ä¢ –ö–∞–∫ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º? - /driver\n"
    support_text += "‚Ä¢ –ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å? - /info\n\n"
    support_text += "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:\n"
    support_text += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º\n"
    support_text += "‚Ä¢ –ñ–∞–ª–æ–±—ã –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è\n"
    support_text += "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏\n\n"
    support_text += "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n"
    support_text += "‚Ä¢ –ü–Ω-–í—Å: 24/7\n"
    support_text += "‚Ä¢ –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞"
    
    await message.answer(support_text, reply_markup=get_main_menu_keyboard())

@router.message(Command("status"))
async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = await user_ops.get_total_users() if user_ops else 0
        total_drivers = 0
        if user_ops:
            from database.operations import DriverOperations
            driver_ops = DriverOperations(user_ops.db)
            total_drivers = await driver_ops.get_total_drivers()
        
        status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –†–∞–π-–¢–∞–∫—Å–∏\n\n"
        status_text += "üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        status_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        status_text += f"üöó –í–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers}\n"
        status_text += "üïê –í—Ä–µ–º—è: " + get_current_time() + "\n\n"
        status_text += "üíª –°–µ—Ä–≤–µ—Ä: Android (Termux)\n"
        status_text += "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite\n"
        status_text += "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –ê–∫—Ç–∏–≤–Ω–æ\n"
        status_text += "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –í–∫–ª—é—á–µ–Ω–∞\n\n"
        status_text += "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        
        await message.answer(status_text, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
            reply_markup=get_main_menu_keyboard()
        )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    from datetime import datetime
    now = datetime.now()
    return now.strftime("%d.%m.%Y %H:%M:%S")

async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
    help_text += "üöï –ó–∞–∫–∞–∑ —Ç–∞–∫—Å–∏:\n"
    help_text += "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏'\n"
    help_text += "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
    help_text += "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
    help_text += "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
    help_text += "üì¶ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
    help_text += "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'\n"
    help_text += "2. –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å\n"
    help_text += "3. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å–∞\n"
    help_text += "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
    help_text += "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤\n"
    help_text += "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n\n"
    help_text += "üí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìç"
    
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = await user_ops.get_user_by_telegram_id(user_id) if user_ops else None
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    profile_text += f"üÜî ID: {user.telegram_id}\n"
    profile_text += f"üë§ –ò–º—è: {user.first_name}\n"
    if user.last_name:
        profile_text += f"üìù –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
    if user.username:
        profile_text += f"üîó Username: @{user.username}\n"
    profile_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user.rating:.1f}\n"
    profile_text += f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {user.total_orders}\n"
    profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    
    await message.answer(profile_text, reply_markup=get_main_menu_keyboard())

async def show_my_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    orders = await order_ops.get_user_orders(user_id, limit=10) if order_ops else []
    
    if not orders:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    orders_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        status_emoji = {
            'new': 'üÜï',
            'searching_driver': 'üîç',
            'driver_assigned': 'üöó',
            'in_progress': 'üöÄ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order.status, '‚ùì')
        
        orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id} - {order.status}\n"
        if order.price:
            from services.price_calculator import PriceCalculator
            orders_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(order.price)}\n"
        orders_text += "\n"
    
    await message.answer(orders_text, reply_markup=get_main_menu_keyboard())

@router.callback_query(F.data == "order_taxi")
async def order_taxi_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    limiter = TaxiOrderLimiter()
    allowed, message = limiter.is_allowed(user_id)
    if not allowed:
        await callback.answer(message, show_alert=True)
        return
    
    await state.set_state(TaxiOrderStates.waiting_for_pickup)
    
    await callback.message.answer(
        Config.MESSAGES['taxi_order'],
        reply_markup=get_location_keyboard()
    )
    await callback.message.answer(
        "–ò–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_cancel_keyboard()
    )

@router.callback_query(F.data == "order_delivery")
async def order_delivery_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    limiter = DeliveryOrderLimiter()
    allowed, message = limiter.is_allowed(user_id)
    if not allowed:
        await callback.answer(message, show_alert=True)
        return
    
    await state.set_state(DeliveryOrderStates.waiting_for_description)
    
    await callback.message.edit_text(
        Config.MESSAGES['delivery_order'],
        reply_markup=get_cancel_keyboard()
    )

@router.message(TaxiOrderStates.waiting_for_pickup, F.location)
async def handle_pickup_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    location = message.location
    
    map_service = MapService()
    pickup_address = map_service.reverse_geocode_coords(location.latitude, location.longitude)
    
    await state.update_data(
        pickup_lat=location.latitude,
        pickup_lon=location.longitude,
        pickup_address=pickup_address if pickup_address else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å"
    )
    
    await state.set_state(TaxiOrderStates.waiting_for_destination)
    
    await message.answer(
        Config.MESSAGES['destination_needed'],
        reply_markup=get_cancel_keyboard()
    )

@router.message(TaxiOrderStates.waiting_for_pickup, F.text)
async def handle_pickup_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    map_service = MapService()
    geocoded_location = map_service.geocode_address(message.text)

    if geocoded_location:
        pickup_lat, pickup_lon = geocoded_location
        await state.update_data(
            pickup_lat=pickup_lat,
            pickup_lon=pickup_lon,
            pickup_address=message.text # Store the text address as well
        )
        await state.set_state(TaxiOrderStates.waiting_for_destination)
        
        map_service = MapService()
        map_data = map_service.create_simple_map(pickup_lat, pickup_lon)
        if map_data:
            await message.answer_photo(
                InputFile(io.BytesIO(map_data)),
                caption=Config.MESSAGES['destination_needed'],
                reply_markup=get_cancel_keyboard()
            )
        else:
            await message.answer(
                Config.MESSAGES['destination_needed'],
                reply_markup=get_cancel_keyboard()
            )
    else:
        print(f"DEBUG: Geocoding failed for pickup address: '{message.text}'") # Add debug print
        await state.update_data(pickup_address="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") # Ensure pickup_address is always set
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_location_keyboard()
        )
        await message.answer(
            "–ò–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )

@router.message(TaxiOrderStates.waiting_for_destination, F.location)
async def handle_destination_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    location = message.location
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    data = await state.get_data()
    pickup_lat = data.get('pickup_lat')
    pickup_lon = data.get('pickup_lon')
    
    if not pickup_lat or not pickup_lon:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    map_service = MapService()
    destination_address = map_service.reverse_geocode_coords(location.latitude, location.longitude)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Ü–µ–Ω—É
    distance = PriceCalculator.calculate_distance(
        pickup_lat, pickup_lon,
        location.latitude, location.longitude
    )
    
    price = PriceCalculator.calculate_taxi_price(distance)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    await state.update_data(
        destination_lat=location.latitude,
        destination_lon=location.longitude,
        destination_address=destination_address if destination_address else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å",
        distance=distance,
        price=price
    )
    
    await state.set_state(TaxiOrderStates.confirming_order)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    map_service = MapService()
    map_data = map_service.create_simple_map(
        data['pickup_lat'], data['pickup_lon'],
        location.latitude, location.longitude # Use location.latitude, location.longitude here
    )

    confirmation_text = (
        f"üöï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏:\n\n"
        f"üìç –û—Ç–∫—É–¥–∞: {data.get('pickup_address', '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')}\n"
        f"üéØ –ö—É–¥–∞: {destination_address if destination_address else '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {PriceCalculator.format_distance(distance)}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(price)}"
    )

    if map_data:
        await message.answer_photo(
            InputFile(io.BytesIO(map_data)),
            caption=confirmation_text,
            reply_markup=get_confirm_keyboard()
        )
    else:
        await message.answer(
            confirmation_text,
            reply_markup=get_confirm_keyboard()
        )

@router.message(TaxiOrderStates.waiting_for_destination, F.text)
async def handle_destination_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    destination_address = message.text
    
    data = await state.get_data()
    pickup_lat = data.get('pickup_lat')
    pickup_lon = data.get('pickup_lon')
    
    if not pickup_lat or not pickup_lon:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    map_service = MapService()
    geocoded_location = map_service.geocode_address(destination_address)

    if geocoded_location:
        destination_lat, destination_lon = geocoded_location
    else:
        print(f"DEBUG: Geocoding failed for destination address: '{destination_address}'") # Add debug print
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å.",
            reply_markup=get_cancel_keyboard()
        )
        return # Stop processing if geocoding fails
    
    price, distance = PriceCalculator.calculate_taxi_price(
        pickup_lat, pickup_lon,
        destination_lat, destination_lon
    )
    
    await state.update_data(
        destination_address=destination_address,
        destination_lat=destination_lat,
        destination_lon=destination_lon,
        distance=distance,
        price=price
    )
    
    await state.set_state(TaxiOrderStates.confirming_order)
    
    map_service = MapService()
    map_data = map_service.create_simple_map(
        data['pickup_lat'], data['pickup_lon'],
        destination_lat, destination_lon
    )

    confirmation_text = (
        f"üöï –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏:\n\n"
        f"üìç –û—Ç–∫—É–¥–∞: {data.get('pickup_address', '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')}\n"
        f"üéØ –ö—É–¥–∞: {destination_address}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {PriceCalculator.format_distance(distance)}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(price)}"
    )

    if map_data:
        await message.answer_photo(
            InputFile(io.BytesIO(map_data)),
            caption=confirmation_text,
            reply_markup=get_confirm_keyboard()
        )
    else:
        await message.answer(
            confirmation_text,
            reply_markup=get_confirm_keyboard()
        )

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order = await order_ops.create_order(
        client_id=callback.from_user.id,
        order_type='taxi',
        pickup_lat=data['pickup_lat'],
        pickup_lon=data['pickup_lon'],
        pickup_address=data.get('pickup_address'), # Add pickup_address
        destination_lat=data.get('destination_lat'),
        destination_lon=data.get('destination_lon'),
        destination_address=data.get('destination_address'), # Add destination_address
        price=data['price'],
        distance=data['distance']
    )
    
    if order:
        await callback.message.edit_text(
            Config.MESSAGES['order_created'],
            reply_markup=get_main_menu_keyboard()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
        await state.set_state(TaxiOrderStates.searching_for_driver)
        await find_and_assign_driver(callback.message, order.id, state)
        
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∑–∞–∫–∞–∑–æ–≤
    if state:
        await state.clear()
    user_id = callback.from_user.id
    orders = await order_ops.get_user_orders(user_id, limit=10)
    
    if not orders:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    orders_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        status_emoji = {
            'new': 'üÜï',
            'searching_driver': 'üîç',
            'driver_assigned': 'üöó',
            'in_progress': 'üöÄ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order.status, '‚ùì')
        
        orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id} - {order.status}\n"
        if order.price:
            from services.price_calculator import PriceCalculator
            orders_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(order.price)}\n"
        orders_text += "\n"
    
    await callback.message.edit_text(
        orders_text,
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
    if state:
        await state.clear()
    user_id = callback.from_user.id
    user = await user_ops.get_user_by_telegram_id(user_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    profile_text += f"üÜî ID: {user.telegram_id}\n"
    profile_text += f"üë§ –ò–º—è: {user.first_name}\n"
    if user.last_name:
        profile_text += f"üìù –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
    if user.username:
        profile_text += f"üîó Username: @{user.username}\n"
    profile_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user.rating:.1f}\n"
    profile_text += f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {user.total_orders}\n"
    profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ø—Ä–∞–≤–∫–∏
    if state:
        await state.clear()
    help_text = "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
    help_text += "üöï –ó–∞–∫–∞–∑ —Ç–∞–∫—Å–∏:\n"
    help_text += "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏'\n"
    help_text += "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
    help_text += "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
    help_text += "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
    help_text += "üì¶ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
    help_text += "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'\n"
    help_text += "2. –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å\n"
    help_text += "3. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å–∞\n"
    help_text += "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
    help_text += "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤\n"
    help_text += "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n\n"
    help_text += "üí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìç"
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if state:
        await state.clear()
    await start_command(callback.message)

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if state:
        await state.clear()
    await start_command(callback.message)
    await callback.answer()

@router.callback_query(F.data == "become_driver")
async def become_driver_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if state:
        await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_driver_registration")
    builder.button(text="üìã –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="driver_info")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    builder.adjust(1, 1, 1)
    
    await callback.message.edit_text(
        Config.MESSAGES['driver_invite'],
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "driver_info")
async def driver_info_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if state:
        await state.clear()
    info_text = "üöó –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –≤–æ–¥–∏—Ç–µ–ª–µ–º\n\n"
    info_text += "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
    info_text += "‚Ä¢ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B\n"
    info_text += "‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –∏—Å–ø—Ä–∞–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n"
    info_text += "‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –û–°–ê–ì–û\n\n"
    info_text += "üí∞ –î–æ—Ö–æ–¥—ã:\n"
    info_text += "‚Ä¢ 70-80% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n"
    info_text += "‚Ä¢ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π\n"
    info_text += "‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
    info_text += "‚è∞ –ì—Ä–∞—Ñ–∏–∫:\n"
    info_text += "‚Ä¢ –†–∞–±–æ—Ç–∞–π—Ç–µ –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ\n"
    info_text += "‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ/–≤—ã–∫–ª—é—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
    info_text += "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤\n\n"
    info_text += "üéØ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:\n"
    info_text += "‚Ä¢ –†–∞–±–æ—Ç–∞ –≤ —Å–≤–æ–µ–º —Ä–∞–π–æ–Ω–µ\n"
    info_text += "‚Ä¢ –ó–Ω–∞–∫–æ–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã\n"
    info_text += "‚Ä¢ –ú–∏–Ω–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–æ—Ä–æ–≥–µ"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_driver_registration")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="become_driver")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    builder.adjust(1, 1, 1)
    
    await callback.message.edit_text(
        info_text,
        reply_markup=builder.as_markup()
    )




@router.callback_query(F.data == "back_to_order")
async def back_to_order_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–∫–∞–∑—É"""
    await callback.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–∫–∞–∑—É")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∑–∞–∫–∞–∑–∞
    await callback.message.edit_text(
        "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–∫–∞–∑—É...",
        reply_markup=get_cancel_keyboard()
    )

async def find_and_assign_driver(message: Message, order_id: int, state: FSMContext):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞.
    """
    await message.answer("üîç –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è...")
    
    order = await order_ops.get_order_by_id(order_id)
    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "searching_driver"
    await order_ops.update_order_status(order_id, Config.ORDER_STATUSES['searching_driver'])

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    from database.operations import DriverOperations
    driver_ops = DriverOperations(user_ops.db) # Assuming user_ops.db is accessible
    available_drivers = await driver_ops.get_available_drivers()

    if not available_drivers:
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard())
        await order_ops.update_order_status(order_id, Config.ORDER_STATUSES['cancelled'])
        await state.clear()
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–æ —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Ç.–¥.
    def sort_by_distance(driver):
        if driver.current_location_lat and driver.current_location_lon:
            return PriceCalculator.calculate_distance(
                order.pickup_lat, order.pickup_lon,
                driver.current_location_lat, driver.current_location_lon
            )
        return float('inf') # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

    available_drivers.sort(key=sort_by_distance)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤–æ–¥–∏—Ç–µ–ª—è–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for driver in available_drivers:
        driver_user = await user_ops.get_user_by_id(driver.user_id) # Assuming get_user_by_id exists
        if not driver_user or not driver_user.telegram_id:
            continue

        offer_text = (
            f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!\n\n"
            f"üìç –û—Ç–∫—É–¥–∞: {order.pickup_address or f'{order.pickup_lat:.4f}, {order.pickup_lon:.4f}'}\n"
            f"üéØ –ö—É–¥–∞: {order.destination_address or f'{order.destination_lat:.4f}, {order.destination_lon:.4f}'}\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {PriceCalculator.format_distance(order.distance)}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(order.price)}\n\n"
            "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"driver_accept_order_{order.id}")
        builder.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"driver_reject_order_{order.id}")
        
        try:
            await bot.send_message(
                chat_id=driver_user.telegram_id,
                text=offer_text,
                reply_markup=builder.as_markup()
            )
            await message.answer(f"‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—é {driver_user.first_name} ({driver.car_model}). –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Å–µ–∫—É–Ω–¥)
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –æ—á–µ—Ä–µ–¥—è–º–∏
            await asyncio.sleep(Config.NOTIFICATION_TIMEOUT)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            updated_order = await order_ops.get_order_by_id(order_id)
            if updated_order.status == Config.ORDER_STATUSES['driver_assigned']:
                await message.answer(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver_user.first_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑!")
                await state.clear()
                return # –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –≤—ã—Ö–æ–¥–∏–º
            elif updated_order.status == Config.ORDER_STATUSES['cancelled']:
                await message.answer("‚ùå –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.", reply_markup=get_main_menu_keyboard())
                await state.clear()
                return
            else:
                await message.answer(f"–í–æ–¥–∏—Ç–µ–ª—å {driver_user.first_name} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –ò—â–µ–º –¥–∞–ª—å—à–µ...")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—é {driver_user.telegram_id}: {e}")
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º {driver_user.first_name}. –ò—â–µ–º –¥—Ä—É–≥–æ–≥–æ...")
            continue # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
    await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏ –æ–¥–∏–Ω –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu_keyboard())
    await order_ops.update_order_status(order_id, Config.ORDER_STATUSES['cancelled'])
    await state.clear()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text=Config.BUTTONS['cancel'], callback_data="cancel_order")
    builder.button(text=Config.BUTTONS['main_menu'], callback_data="main_menu")
    return builder.as_markup()

def get_location_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_confirm_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.button(text=Config.BUTTONS['confirm'], callback_data="confirm_order")
    builder.button(text=Config.BUTTONS['cancel'], callback_data="cancel_order")
    builder.button(text=Config.BUTTONS['main_menu'], callback_data="main_menu")
    return builder.as_markup()

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    builder.button(text=Config.BUTTONS['back'], callback_data="back_to_order")
    builder.button(text=Config.BUTTONS['main_menu'], callback_data="main_menu")
    return builder.as_markup()

def get_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text=Config.BUTTONS['main_menu'], callback_data="main_menu")
    return builder.as_markup()
