"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –†–∞–π-–¢–∞–∫—Å–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Location
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.operations import UserOperations, OrderOperations
from services.price_calculator import PriceCalculator
from utils.maps import MapService
from utils.rate_limiter import TaxiOrderLimiter, DeliveryOrderLimiter
from config import Config

router = Router()

class TaxiOrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏"""
    waiting_for_pickup = State()
    waiting_for_destination = State()
    confirming_order = State()

class DeliveryOrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    waiting_for_description = State()
    waiting_for_pickup = State()
    waiting_for_destination = State()
    confirming_order = State()

class ClientHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, user_ops: UserOperations, order_ops: OrderOperations):
        self.user_ops = user_ops
        self.order_ops = order_ops
        self.map_service = MapService()
        self.taxi_limiter = TaxiOrderLimiter()
        self.delivery_limiter = DeliveryOrderLimiter()
    
    @router.message(Command("start"))
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await self.user_ops.get_user_by_telegram_id(user.id)
        
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.user_ops.create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text=Config.BUTTONS['taxi'], callback_data="order_taxi")
        builder.button(text=Config.BUTTONS['delivery'], callback_data="order_delivery")
        builder.button(text=Config.BUTTONS['my_orders'], callback_data="my_orders")
        builder.button(text=Config.BUTTONS['profile'], callback_data="profile")
        builder.button(text=Config.BUTTONS['help'], callback_data="help")
        
        builder.adjust(2, 2, 1)
        
        await message.answer(
            Config.MESSAGES['welcome'],
            reply_markup=builder.as_markup()
        )
    
    @router.callback_query(F.data == "order_taxi")
    async def order_taxi_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏"""
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        allowed, message = self.taxi_limiter.is_allowed(user_id)
        if not allowed:
            await callback.answer(message, show_alert=True)
            return
        
        await state.set_state(TaxiOrderStates.waiting_for_pickup)
        
        await callback.message.edit_text(
            Config.MESSAGES['taxi_order'],
            reply_markup=self._get_cancel_keyboard()
        )
    
    @router.callback_query(F.data == "order_delivery")
    async def order_delivery_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        allowed, message = self.delivery_limiter.is_allowed(user_id)
        if not allowed:
            await callback.answer(message, show_alert=True)
            return
        
        await state.set_state(DeliveryOrderStates.waiting_for_description)
        
        await callback.message.edit_text(
            Config.MESSAGES['delivery_order'],
            reply_markup=self._get_cancel_keyboard()
        )
    
    @router.message(TaxiOrderStates.waiting_for_pickup, F.location)
    async def handle_pickup_location(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        location = message.location
        
        await state.update_data(
            pickup_lat=location.latitude,
            pickup_lon=location.longitude
        )
        
        await state.set_state(TaxiOrderStates.waiting_for_destination)
        
        await message.answer(
            Config.MESSAGES['destination_needed'],
            reply_markup=self._get_cancel_keyboard()
        )
    
    @router.message(TaxiOrderStates.waiting_for_pickup, F.text)
    async def handle_pickup_address(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–µ–æ–∫–æ–¥–µ—Ä
        await message.answer(
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìç",
            reply_markup=self._get_location_keyboard()
        )
    
    @router.message(TaxiOrderStates.waiting_for_destination, F.location)
    async def handle_destination_location(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        location = message.location
        
        data = await state.get_data()
        pickup_lat = data['pickup_lat']
        pickup_lon = data['pickup_lon']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price, distance = PriceCalculator.calculate_taxi_price(
            pickup_lat, pickup_lon, location.latitude, location.longitude
        )
        
        await state.update_data(
            destination_lat=location.latitude,
            destination_lon=location.longitude,
            price=price,
            distance=distance
        )
        
        await state.set_state(TaxiOrderStates.confirming_order)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        map_data = self.map_service.create_simple_map(
            pickup_lat, pickup_lon, location.latitude, location.longitude
        )
        
        if map_data:
            await message.answer_photo(
                map_data,
                caption=self._format_order_confirmation(data, price, distance),
                reply_markup=self._get_confirm_order_keyboard()
            )
        else:
            await message.answer(
                self._format_order_confirmation(data, price, distance),
                reply_markup=self._get_confirm_order_keyboard()
            )
    
    @router.callback_query(F.data == "confirm_order")
    async def confirm_order_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        data = await state.get_data()
        user_id = callback.from_user.id
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order = await self.order_ops.create_order(
                client_id=user_id,
                order_type='taxi',
                pickup_lat=data['pickup_lat'],
                pickup_lon=data['pickup_lon'],
                pickup_address="–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                destination_lat=data['destination_lat'],
                destination_lon=data['destination_lon'],
                destination_address="–£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                price=data['price'],
                distance=data['distance']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            await self.order_ops.update_order_status(order.id, 'searching_driver')
            
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üöó –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è...\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(data['price'])}\n"
                f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {PriceCalculator.format_distance(data['distance'])}"
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.clear()
    
    @router.callback_query(F.data == "cancel")
    async def cancel_callback(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
        await state.clear()
        
        builder = InlineKeyboardBuilder()
        builder.button(text=Config.BUTTONS['taxi'], callback_data="order_taxi")
        builder.button(text=Config.BUTTONS['delivery'], callback_data="order_delivery")
        builder.button(text=Config.BUTTONS['my_orders'], callback_data="my_orders")
        builder.button(text=Config.BUTTONS['profile'], callback_data="profile")
        builder.button(text=Config.BUTTONS['help'], callback_data="help")
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    @router.callback_query(F.data == "my_orders")
    async def my_orders_callback(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = callback.from_user.id
        
        try:
            orders = await self.order_ops.get_user_orders(user_id, limit=5)
            
            if not orders:
                await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
                return
            
            text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders:
                status_emoji = {
                    'new': 'üÜï',
                    'searching_driver': 'üîç',
                    'driver_assigned': 'üöó',
                    'in_progress': 'üöÄ',
                    'completed': '‚úÖ',
                    'cancelled': '‚ùå'
                }
                
                text += f"{status_emoji.get(order.status, '‚ùì')} –ó–∞–∫–∞–∑ #{order.id}\n"
                text += f"   –¢–∏–ø: {'üöï –¢–∞–∫—Å–∏' if order.order_type == 'taxi' else 'üì¶ –î–æ—Å—Ç–∞–≤–∫–∞'}\n"
                text += f"   –°—Ç–∞—Ç—É—Å: {order.status}\n"
                text += f"   –¶–µ–Ω–∞: {PriceCalculator.format_price(order.price)}\n"
                text += f"   –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await callback.message.edit_text(
                text,
                reply_markup=self._get_back_keyboard()
            )
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
    
    def _get_cancel_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        builder = InlineKeyboardBuilder()
        builder.button(text=Config.BUTTONS['cancel'], callback_data="cancel")
        return builder.as_markup()
    
    def _get_location_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="send_location")
        builder.button(text=Config.BUTTONS['cancel'], callback_data="cancel")
        return builder.as_markup()
    
    def _get_confirm_order_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        builder = InlineKeyboardBuilder()
        builder.button(text=Config.BUTTONS['confirm'], callback_data="confirm_order")
        builder.button(text=Config.BUTTONS['cancel'], callback_data="cancel")
        return builder.as_markup()
    
    def _get_back_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        builder = InlineKeyboardBuilder()
        builder.button(text=Config.BUTTONS['back'], callback_data="back_to_main")
        return builder.as_markup()
    
    def _format_order_confirmation(self, data: dict, price: float, distance: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        return (
            f"üöï –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏\n\n"
            f"üìç –û—Ç–∫—É–¥–∞: {data['pickup_lat']:.4f}, {data['pickup_lon']:.4f}\n"
            f"üéØ –ö—É–¥–∞: {data['destination_lat']:.4f}, {data['destination_lon']:.4f}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {PriceCalculator.format_price(price)}\n"
            f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {PriceCalculator.format_distance(distance)}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
        )
