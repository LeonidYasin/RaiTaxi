"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –†–∞–π-–¢–∞–∫—Å–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import Config

router = Router()

class AdminSettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    waiting_for_tariff_type = State()
    waiting_for_base_fare = State()
    waiting_for_per_km_rate = State()
    waiting_for_minimum_fare = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –ë–î
user_ops = None
order_ops = None
driver_ops = None

def set_operations(user_operations, order_operations, driver_operations, bot_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global user_ops, order_ops, driver_ops, bot
    user_ops = user_operations
    order_ops = order_operations
    driver_ops = driver_operations
    bot = bot_instance

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user = await user_ops.get_user_by_telegram_id(user_id) if user_ops else None
    
    if not user or user.role != 'admin':
        await message.answer(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await show_admin_panel(message)

async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    panel_text = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
    panel_text += f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.first_name}\n"
    panel_text += "üïê –í—Ä–µ–º—è: " + get_current_time() + "\n\n"
    panel_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_statistics")
    builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    builder.button(text="üöï –í–æ–¥–∏—Ç–µ–ª–∏", callback_data="admin_drivers")
    builder.button(text="üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    builder.button(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="admin_tariffs")
    builder.button(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
    builder.button(text="üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    builder.button(text="üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring")
    builder.button(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(2, 2, 2, 2, 1)
    
    await message.answer(panel_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "admin_statistics")
async def admin_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = await user_ops.get_total_users() if user_ops else 0
        total_drivers = await driver_ops.get_total_drivers() if driver_ops else 0
        total_orders = await order_ops.get_total_orders() if order_ops else 0
        active_orders = await order_ops.get_active_orders_count() if order_ops else 0
        
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üöó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers}\n"
        stats_text += f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        stats_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {active_orders}\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if total_orders > 0:
            completed_orders = await order_ops.get_completed_orders_count() if order_ops else 0
            completion_rate = (completed_orders / total_orders) * 100
            stats_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            stats_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%\n\n"
        
        stats_text += "üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: " + get_current_time()
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_to_admin_panel_keyboard()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        users = await user_ops.get_recent_users(limit=10) if user_ops else []
        
        if not users:
            users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            users_text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for user in users:
                role_emoji = {
                    'client': 'üë§',
                    'driver': 'üöó',
                    'admin': 'üëë'
                }.get(user.role, '‚ùì')
                
                users_text += f"{role_emoji} {user.first_name}"
                if user.last_name:
                    users_text += f" {user.last_name}"
                users_text += f"\n"
                users_text += f"   üÜî ID: {user.telegram_id}\n"
                users_text += f"   üè∑Ô∏è –†–æ–ª—å: {user.role}\n"
                users_text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        
        users_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")
        builder.button(text="üìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")
        builder.button(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data="admin_block_user")
        builder.button(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data="admin_unblock_user")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            users_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "admin_drivers")
async def admin_drivers(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = await driver_ops.get_all_drivers() if driver_ops else []
        
        drivers_text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏\n\n"
        drivers_text += f"üìä –í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers)}\n\n"
        
        if drivers:
            drivers_text += "üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n"
            for driver in drivers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                drivers_text += f"‚Ä¢ {driver.car_model} ({driver.car_number})\n"
                drivers_text += f"  –°—Ç–∞—Ç—É—Å: {'üü¢ –û–Ω–ª–∞–π–Ω' if driver.is_available else 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω'}\n"
                drivers_text += f"  –†–µ–π—Ç–∏–Ω–≥: {driver.rating:.1f}‚≠ê\n\n"
            
            if len(drivers) > 10:
                drivers_text += f"... –∏ –µ—â–µ {len(drivers) - 10} –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\n"
        else:
            drivers_text += "üìã –í–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
        
        drivers_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="admin_drivers_stats")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            drivers_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "admin_orders")
async def admin_orders(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
        total_orders = await order_ops.get_total_orders() if order_ops else 0
        active_orders = await order_ops.get_active_orders_count() if order_ops else 0
        completed_orders = await order_ops.get_completed_orders_count() if order_ops else 0
        
        orders_text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n\n"
        orders_text += f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        orders_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_orders}\n"
        orders_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_orders}\n\n"
        
        if total_orders > 0:
            completion_rate = (completed_orders / total_orders) * 100
            orders_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_rate:.1f}%\n\n"
        
        orders_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_stats")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            orders_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "admin_tariffs")
async def admin_tariffs(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    tariffs_text = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏\n\n"
    tariffs_text += f"üöï –¢–∞–∫—Å–∏:\n"
    tariffs_text += f"   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {Config.BASE_FARE} ‚ÇΩ\n"
    tariffs_text += f"   ‚Ä¢ –ó–∞ –∫–∏–ª–æ–º–µ—Ç—Ä: {Config.PER_KM_RATE} ‚ÇΩ\n"
    tariffs_text += f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {Config.MINIMUM_FARE} ‚ÇΩ\n\n"
    tariffs_text += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n"
    tariffs_text += f"   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {Config.DELIVERY_BASE_FARE} ‚ÇΩ\n"
    tariffs_text += f"   ‚Ä¢ –ó–∞ –∫–∏–ª–æ–º–µ—Ç—Ä: {Config.PER_KM_RATE} ‚ÇΩ\n"
    tariffs_text += f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {Config.MINIMUM_FARE} ‚ÇΩ\n\n"
    tariffs_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="admin_edit_tariffs")
    builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="admin_tariff_history")
    builder.button(text="üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="admin_tariff_suggestions")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(2, 2, 1)
    
    await callback.message.edit_text(
        tariffs_text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "admin_system")
async def admin_system(callback: CallbackQuery):
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    system_text = "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    system_text += "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
    system_text += "   ‚Ä¢ –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    system_text += "   ‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã\n"
    system_text += "   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
    system_text += "   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
    system_text += "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n"
    system_text += "   ‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º\n"
    system_text += "   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n"
    system_text += "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
    system_text += "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
    system_text += "   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
    system_text += "   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n"
    system_text += "   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    system_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_system_main")
    builder.button(text="üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="admin_system_security")
    builder.button(text="üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_system_database")
    builder.button(text="üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_backup")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(2, 2, 1, 1)
    
    await callback.message.edit_text(
        system_text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "admin_monitoring")
async def admin_monitoring(callback: CallbackQuery):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        online_drivers = await driver_ops.get_online_drivers_count() if driver_ops else 0
        pending_orders = await order_ops.get_pending_orders_count() if order_ops else 0
        
        monitoring_text = "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n\n"
        monitoring_text += "üìä –°—Ç–∞—Ç—É—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:\n"
        monitoring_text += f"   üü¢ –û–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π: {online_drivers}\n"
        monitoring_text += f"   üìã –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {pending_orders}\n"
        monitoring_text += f"   üïê –í—Ä–µ–º—è: {get_current_time()}\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        monitoring_text += "üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
        monitoring_text += "   ‚Ä¢ CPU: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n"
        monitoring_text += "   ‚Ä¢ –ü–∞–º—è—Ç—å: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ\n"
        monitoring_text += "   ‚Ä¢ –î–∏—Å–∫: –°–≤–æ–±–æ–¥–Ω–æ\n"
        monitoring_text += "   ‚Ä¢ –°–µ—Ç—å: –°—Ç–∞–±–∏–ª—å–Ω–æ\n\n"
        
        monitoring_text += "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        monitoring_text += "   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
        monitoring_text += "   ‚Ä¢ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
        monitoring_text += "   ‚Ä¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_monitoring")
        builder.button(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_detailed_monitoring")
        builder.button(text="‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏", callback_data="admin_check_errors")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(
            monitoring_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "admin_notifications")
async def admin_notifications(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    notifications_text = "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
    notifications_text += "üîî –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
    notifications_text += "   ‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n"
    notifications_text += "   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
    notifications_text += "   ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
    notifications_text += "   ‚Ä¢ –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\n"
    notifications_text += "üì± –ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
    notifications_text += "   ‚Ä¢ Telegram (–æ—Å–Ω–æ–≤–Ω–æ–π)\n"
    notifications_text += "   ‚Ä¢ Email (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)\n"
    notifications_text += "   ‚Ä¢ SMS (—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ)\n\n"
    notifications_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_send_notification")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_notification_settings")
    builder.button(text="üìã –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_notification_history")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(2, 2, 1)
    
    await callback.message.edit_text(
        notifications_text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "admin_reports")
async def admin_reports(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    reports_text = "üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n\n"
    reports_text += "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n"
    reports_text += "   ‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
    reports_text += "   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤\n"
    reports_text += "   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
    reports_text += "   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    reports_text += "   ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n"
    reports_text += "üìÖ –ü–µ—Ä–∏–æ–¥—ã:\n"
    reports_text += "   ‚Ä¢ –ó–∞ –¥–µ–Ω—å\n"
    reports_text += "   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é\n"
    reports_text += "   ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü\n"
    reports_text += "   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n"
    reports_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π", callback_data="admin_financial_report")
    builder.button(text="üìã –ü–æ –∑–∞–∫–∞–∑–∞–º", callback_data="admin_orders_report")
    builder.button(text="üöó –ü–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", callback_data="admin_drivers_report")
    builder.button(text="üë• –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users_report")
    builder.button(text="üìä –°–∏—Å—Ç–µ–º–Ω—ã–π", callback_data="admin_system_report")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_panel")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(2, 2, 2, 1)
    
    await callback.message.edit_text(
        reports_text,
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await show_admin_panel(callback.message)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from handlers.client import start_command
    await start_command(callback.message)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    from datetime import datetime
    now = datetime.now()
    return now.strftime("%d.%m.%Y %H:%M:%S")

def get_back_to_admin_panel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_admin_panel")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    return builder.as_markup()

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    return builder.as_markup()
