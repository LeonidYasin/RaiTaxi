"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –†–∞–π-–¢–∞–∫—Å–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import Config
from utils.validators import DataValidator

router = Router()

class DriverRegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    waiting_for_car_model = State()
    waiting_for_car_number = State()
    waiting_for_license = State()
    waiting_for_phone = State() # New state for phone number collection
    confirming_registration = State()

class DriverOrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    viewing_orders = State()
    order_details = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º –ë–î –∏ –±–æ—Ç—É
user_ops = None
order_ops = None
driver_ops = None
bot = None

def set_operations(user_operations, order_operations, driver_operations, bot_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global user_ops, order_ops, driver_ops, bot
    user_ops = user_operations
    order_ops = order_operations
    driver_ops = driver_operations
    bot = bot_instance

@router.message(Command("driver"))
async def driver_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id) if user_ops else None
        
        if not user_db_id:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
        driver = await driver_ops.get_driver_by_user_id(user_db_id) if driver_ops else None
        
        if driver:
            # –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            await show_driver_panel(message, driver)
        else:
            # –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await show_driver_registration(message)
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_menu_keyboard()
        )

async def show_driver_panel(message: Message, driver):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    status_emoji = "üü¢" if driver.is_available else "üî¥"
    status_text = "–î–æ—Å—Ç—É–ø–µ–Ω" if driver.is_available else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    panel_text = f"üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª—è\n\n"
    panel_text += f"üë§ {message.from_user.first_name}\n"
    panel_text += f"üöô {driver.car_model} ({driver.car_number})\n"
    panel_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
    panel_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {driver.rating:.1f}\n"
    panel_text += f"üöï –ü–æ–µ–∑–¥–æ–∫: {driver.total_trips}\n"
    panel_text += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {driver.total_earnings:.0f} ‚ÇΩ\n\n"
    panel_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    builder = InlineKeyboardBuilder()
    
    if driver.is_available:
        builder.button(text="üî¥ –°—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º", callback_data="driver_offline")
        builder.button(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="view_available_orders")
    else:
        builder.button(text="üü¢ –°—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º", callback_data="driver_online")
    
    builder.button(text="üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="driver_my_orders")
    builder.button(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="driver_finances")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="driver_settings")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    
    builder.adjust(2, 2, 1, 1)
    
    await message.answer(panel_text, reply_markup=builder.as_markup())

async def show_driver_registration(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    registration_text = "üöó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è\n\n"
    registration_text += "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ –†–∞–π-–¢–∞–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
    registration_text += "‚Ä¢ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
    registration_text += "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è\n"
    registration_text += "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
    registration_text += "–ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_driver_registration")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
    
    await message.answer(registration_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "start_driver_registration")
async def start_driver_registration(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    await state.set_state(DriverRegistrationStates.waiting_for_car_model)
    
    await callback.message.edit_text(
        "üöô –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Toyota Camry, Lada Granta, Hyundai Solaris",
        reply_markup=get_cancel_keyboard()
    )

@router.message(DriverRegistrationStates.waiting_for_car_model)
async def handle_car_model(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    car_model = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if len(car_model) < 3:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(car_model) > 50:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
            "–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(car_model=car_model)
    await state.set_state(DriverRegistrationStates.waiting_for_car_number)
    
    await message.answer(
        "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í77, –ú777–ú–ú77",
        reply_markup=get_cancel_keyboard()
    )

@router.message(DriverRegistrationStates.waiting_for_car_number)
async def handle_car_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    car_number = message.text.strip().upper()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    is_valid, error_msg = DataValidator.validate_car_number(car_number)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê123–ë–í77, –ú777–ú–ú77",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(car_number=car_number)
    await state.set_state(DriverRegistrationStates.waiting_for_license)
    
    await message.answer(
        "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 77 –ê–ê 123456",
        reply_markup=get_cancel_keyboard()
    )

@router.message(DriverRegistrationStates.waiting_for_license)
async def handle_license(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è"""
    license_number = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –í–£
    if len(license_number) < 8:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –í–£\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(license_number) > 20:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –í–£\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(license_number=license_number)
    await state.set_state(DriverRegistrationStates.waiting_for_phone)
    
    await message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.",
        reply_markup=get_phone_request_keyboard()
    )

@router.message(DriverRegistrationStates.waiting_for_phone, F.contact)
async def handle_driver_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"""
    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    
    await user_ops.update_user_phone(user_id, phone_number)
    
    # Now proceed to confirmation
    data = await state.get_data()
    
    confirm_text = "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
    confirm_text += f"üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data['car_model']}\n"
    confirm_text += f"üöó –ù–æ–º–µ—Ä: {data['car_number']}\n"
    confirm_text += f"üìã –í–£: {data['license_number']}\n"
    confirm_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
    confirm_text += "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    
    await state.set_state(DriverRegistrationStates.confirming_registration)
    await message.answer(confirm_text, reply_markup=get_confirm_registration_keyboard())

@router.message(DriverRegistrationStates.waiting_for_phone, F.text)
async def handle_driver_phone_number_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É)"""
    phone_number = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å '+' (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789), –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞'.",
            reply_markup=get_phone_request_keyboard()
        )
        return
    
    user_id = message.from_user.id
    await user_ops.update_user_phone(user_id, phone_number)
    
    # Now proceed to confirmation
    data = await state.get_data()
    
    confirm_text = "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
    confirm_text += f"üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data['car_model']}\n"
    confirm_text += f"üöó –ù–æ–º–µ—Ä: {data['car_number']}\n"
    confirm_text += f"üìã –í–£: {data['license_number']}\n"
    confirm_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
    confirm_text += "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    
    await state.set_state(DriverRegistrationStates.confirming_registration)
    await message.answer(confirm_text, reply_markup=get_confirm_registration_keyboard())

@router.callback_query(F.data == "confirm_driver_registration")
async def confirm_driver_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è"""
    data = await state.get_data()
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        
        if not user_db_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        driver = await driver_ops.create_driver(
            user_id=user_db_id,
            car_model=data['car_model'],
            car_number=data['car_number'],
            license_number=data['license_number']
        )
        
        if driver:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 'driver' (–∏—Å–ø–æ–ª—å–∑—É–µ–º telegram_id)
            await user_ops.update_user_role(user_id, 'driver')
            
            await callback.message.edit_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
                "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Å—Ç–∞—Ç—É—Å–æ–º\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
    
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /driver",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "driver_online")
async def driver_online(callback: CallbackQuery):
    """–î–µ–ª–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã–º"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        
        if not user_db_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await driver_ops.update_driver_availability(user_db_id, True)
        await callback.answer("üü¢ –í—ã —Å—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∑–∞–∫–∞–∑–æ–≤!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        driver = await driver_ops.get_driver_by_user_id(user_db_id)
        await show_driver_panel(callback.message, driver)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "driver_offline")
async def driver_offline(callback: CallbackQuery):
    """–î–µ–ª–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        
        if not user_db_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await driver_ops.update_driver_availability(user_db_id, False)
        await callback.answer("üî¥ –í—ã —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∑–∞–∫–∞–∑–æ–≤!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        driver = await driver_ops.get_driver_by_user_id(user_db_id)
        await show_driver_panel(callback.message, driver)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "view_available_orders")
async def view_available_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    try:
        orders = await order_ops.get_available_orders()
        
        if not orders:
            await callback.message.edit_text(
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=get_back_to_driver_panel_keyboard()
            )
            return
        
        orders_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–∫–∞–∑–æ–≤
            orders_text += f"üöï –ó–∞–∫–∞–∑ #{order.id}\n"
            orders_text += f"üìç –û—Ç–∫—É–¥–∞: {order.pickup_address or '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'}\n"
            if order.destination_address:
                orders_text += f"üéØ –ö—É–¥–∞: {order.destination_address}\n"
            orders_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.price:.0f} ‚ÇΩ\n"
            orders_text += f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order.distance:.1f} –∫–º\n\n"
        
        if len(orders) > 5:
            orders_text += f"... –∏ –µ—â–µ {len(orders) - 5} –∑–∞–∫–∞–∑–æ–≤\n\n"
        
        orders_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:"
        
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        for order in orders[:5]:
            builder.button(
                text=f"üöï #{order.id} - {order.price:.0f}‚ÇΩ", 
                callback_data=f"take_order_{order.id}"
            )
        
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_available_orders")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_driver_panel")
        
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
        
        await callback.message.edit_text(orders_text, reply_markup=builder.as_markup())
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("driver_accept_order_"))
async def driver_accept_order(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    try:
        order_id = int(callback.data.split("_")[3])
        user_id = callback.from_user.id
        
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        if not user_db_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        success = await order_ops.assign_driver_to_order(order_id, user_db_id)
        
        if success:
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!")
            order = await order_ops.get_order_by_id(order_id)
            client_user = await user_ops.get_user_by_id(order.client_id)
            driver_user = await user_ops.get_user_by_id(user_db_id) # Get driver's user object
            
            driver_phone = driver_user.phone if driver_user else "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            if client_user and client_user.telegram_id:
                client_message_text = (
                    f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º!\n\n"
                    f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {driver_user.first_name} ({driver_user.username or '–±–µ–∑ username'})\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {driver_phone}\n"
                    f"üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {driver.car_model} ({driver.car_number})\n\n"
                    "–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
                )
                builder = InlineKeyboardBuilder()
                builder.button(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é", url=f"tel:{driver_phone}")
                await bot.send_message(
                    chat_id=client_user.telegram_id,
                    text=client_message_text,
                    reply_markup=builder.as_markup()
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
            await callback.message.edit_text(
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order.id}!\n\n"
                f"üìç –û—Ç–∫—É–¥–∞: {order.pickup_address or f'{order.pickup_lat:.4f}, {order.pickup_lon:.4f}'}\n"
                f"üéØ –ö—É–¥–∞: {order.destination_address or f'{order.destination_lat:.4f}, {order.destination_lon:.4f}'}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order.price:.0f} ‚ÇΩ\n"
                f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order.distance:.1f} –∫–º\n\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {client_user.phone if client_user else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                "üì± –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
            # Optionally, update driver's availability to busy
            await driver_ops.update_driver_availability(user_db_id, False) # Driver is now busy
            
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
            await callback.message.edit_text(
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                reply_markup=get_back_to_driver_panel_keyboard()
            )
            
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("driver_reject_order_"))
async def driver_reject_order(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[3])
        user_id = callback.from_user.id
        
        # –ü—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç
        await callback.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞.")
        await callback.message.edit_text(
            f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ #{order_id}.",
            reply_markup=get_back_to_driver_panel_keyboard()
        )
        
        # –í find_and_assign_driver –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª "new" –∏–ª–∏ "searching_driver"
        # –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ –¥—Ä—É–≥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é.
        # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã find_and_assign_driver –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–æ–∏—Å–∫,
        # —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å, –∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—É —Å—Ä–∞–±–æ—Ç–∞—Ç—å.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å.
        
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞–∫–∞–∑–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("take_order_"))
async def take_order(callback: CallbackQuery):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–æ–≥–∏–∫–∏ "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤".
    –ï–≥–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ "view_available_orders"
    –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —á–µ—Ä–µ–∑ "find_and_assign_driver".
    –ü–æ–∫–∞ —á—Ç–æ, –æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª driver_accept_order.
    """
    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å' –∏–ª–∏ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.")
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ driver_accept_order –∏–ª–∏ driver_reject_order
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # order_id = int(callback.data.split("_")[2])
    # await driver_accept_order(callback) # –ò–ª–∏ driver_reject_order

@router.callback_query(F.data == "driver_my_orders")
async def driver_my_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        
        if not user_db_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        orders = await order_ops.get_driver_orders(user_db_id, limit=10)
        
        if not orders:
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n\n"
                "–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å",
                reply_markup=get_back_to_driver_panel_keyboard()
            )
            return
        
        orders_text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            status_emoji = {
                'driver_assigned': 'üöó',
                'in_progress': 'üöÄ',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(order.status, '‚ùì')
            
            orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id}\n"
            orders_text += f"   –°—Ç–∞—Ç—É—Å: {order.status}\n"
            orders_text += f"   üí∞ {order.price:.0f} ‚ÇΩ\n"
            orders_text += f"   üìÖ {order.created_at.strftime('%d.%m %H:%M') if order.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        
        await callback.message.edit_text(
            orders_text,
            reply_markup=get_back_to_driver_panel_keyboard()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "driver_finances")
async def driver_finances(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        
        if not user_db_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        driver = await driver_ops.get_driver_by_user_id(user_db_id)
        
        if not driver:
            await callback.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        finance_text = "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        finance_text += f"üí≥ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {driver.total_earnings:.0f} ‚ÇΩ\n"
        finance_text += f"üöï –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {driver.total_trips}\n"
        finance_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {driver.rating:.1f}\n"
        finance_text += f"üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {driver.total_earnings / max(driver.total_trips, 1):.0f} ‚ÇΩ\n\n"
        finance_text += "üí° –†–µ–π—Ç–∏–Ω–≥ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
        
        await callback.message.edit_text(
            finance_text,
            reply_markup=get_back_to_driver_panel_keyboard()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "driver_settings")
async def driver_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è\n\n"
    settings_text += "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
    settings_text += "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n"
    settings_text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n"
    settings_text += "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã\n\n"
    settings_text += "üì± –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
    settings_text += "–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_back_to_driver_panel_keyboard()
    )

@router.callback_query(F.data == "back_to_driver_panel")
async def back_to_driver_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_db_id = await user_ops.get_user_id_by_telegram_id(user_id)
        
        if not user_db_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        driver = await driver_ops.get_driver_by_user_id(user_db_id) if driver_ops else None
        
        if driver:
            await show_driver_panel(callback.message, driver)
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from handlers.client import start_command
    await start_command(callback.message)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_phone_request_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    return builder.as_markup()

def get_confirm_registration_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_driver_registration")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    return builder.as_markup()

def get_back_to_driver_panel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–Ω–µ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="back_to_driver_panel")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    return builder.as_markup()

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    return builder.as_markup()
