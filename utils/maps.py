"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ OSM Static Maps
"""

import requests
import os
from typing import Tuple, Optional
from PIL import Image, ImageDraw, ImageFont
import io
from config import Config

class MapService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏"""
    
    def __init__(self):
        self.base_url = Config.OSM_STATIC_MAPS_URL
        self.width = Config.MAP_WIDTH
        self.height = Config.MAP_HEIGHT
        self.zoom = Config.MAP_ZOOM
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫—ç—à–∞ –∫–∞—Ä—Ç
        self.cache_dir = "static/images/maps"
        os.makedirs(self.cache_dir, exist_ok=True)

    def geocode_address(self, address: str) -> Optional[Tuple[float, float]]:
        """
        –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Nominatim OpenStreetMap API.
        """
        nominatim_url = "https://nominatim.openstreetmap.org/search"
        params = {
            'q': address,
            'format': 'json',
            'limit': 1,
            'addressdetails': 0,
            'extratags': 0,
            'namedetails': 0
        }
        headers = {
            'User-Agent': 'RaiTaxiBot/1.0 (https://github.com/your-username/raitaxi)' # Replace with actual repo URL
        }
        try:
            response = requests.get(nominatim_url, params=params, headers=headers, timeout=5)
            response.raise_for_status()
            data = response.json()
            if data and len(data) > 0:
                lat = float(data[0]['lat'])
                lon = float(data[0]['lon'])
                return lat, lon
            return None
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ '{address}': {e}")
            return None
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞: {e}")
            return None
    
    def get_static_map(self, center_lat: float, center_lon: float,
                       markers: list = None, routes: list = None) -> Optional[bytes]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã
        
        Args:
            center_lat, center_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
            markers: —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤ [(lat, lon, color, label), ...]
            routes: —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ [(lat1, lon1, lat2, lon2), ...]
        
        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'center': f"{center_lat},{center_lon}",
                'zoom': self.zoom,
                'size': f"{self.width}x{self.height}",
                'maptype': 'mapnik',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ OSM
                'format': 'png'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
            if markers:
                marker_params = []
                for lat, lon, color, label in markers:
                    marker_str = f"{color},{lat},{lon}"
                    if label:
                        marker_str += f",{label}"
                    marker_params.append(marker_str)
                
                params['markers'] = marker_params
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)
            if routes:
                route_params = []
                for lat1, lon1, lat2, lon2 in routes:
                    route_str = f"{lat1},{lon1},{lat2},{lon2}"
                    route_params.append(route_str)
                
                params['routes'] = route_params
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.content
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
            return None
    
    def create_simple_map(self, pickup_lat: float, pickup_lon: float,
                         destination_lat: float = None, destination_lon: float = None,
                         driver_lat: float = None, driver_lon: float = None) -> Optional[bytes]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
        
        Args:
            pickup_lat, pickup_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            destination_lat, destination_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            driver_lat, driver_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è
        
        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
        if destination_lat and destination_lon:
            # –¶–µ–Ω—Ç—Ä –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            center_lat = (pickup_lat + destination_lat) / 2
            center_lon = (pickup_lon + destination_lon) / 2
        else:
            center_lat, center_lon = pickup_lat, pickup_lon
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
        markers = [
            (pickup_lat, pickup_lon, 'red', 'A'),  # –¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ]
        
        if destination_lat and destination_lon:
            markers.append((destination_lat, destination_lon, 'green', 'B'))  # –¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        
        if driver_lat and driver_lon:
            markers.append((driver_lat, driver_lon, 'blue', 'üöó'))  # –í–æ–¥–∏—Ç–µ–ª—å
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É
        map_data = self.get_static_map(center_lat, center_lon, markers=markers)
        
        if map_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç—É
            return self.add_map_overlay(map_data, pickup_lat, pickup_lon, 
                                      destination_lat, destination_lon)
        
        return map_data
    
    def add_map_overlay(self, map_data: bytes, pickup_lat: float, pickup_lon: float,
                        destination_lat: float = None, destination_lon: float = None) -> bytes:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É
        
        Args:
            map_data: –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            pickup_lat, pickup_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            destination_lat, destination_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        
        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(io.BytesIO(map_data))
            draw = ImageDraw.Draw(image)
            
            # –ü—Ä–æ—Å—Ç–æ–π —à—Ä–∏—Ñ—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                font = ImageFont.truetype("arial.ttf", 16)
            except:
                font = ImageFont.load_default()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            info_text = f"–û—Ç–∫—É–¥–∞: {pickup_lat:.4f}, {pickup_lon:.4f}"
            draw.text((10, 10), info_text, fill='black', font=font)
            
            if destination_lat and destination_lon:
                info_text2 = f"–ö—É–¥–∞: {destination_lat:.4f}, {destination_lon:.4f}"
                draw.text((10, 30), info_text2, fill='black', font=font)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –†–∞–π-–¢–∞–∫—Å–∏
            logo_text = "üöó –†–∞–π-–¢–∞–∫—Å–∏"
            draw.text((10, image.height - 30), logo_text, fill='red', font=font)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
            output = io.BytesIO()
            image.save(output, format='PNG')
            return output.getvalue()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–≤–µ—Ä–ª–µ—è: {e}")
            return map_data
    
    def get_map_url(self, lat: float, lon: float, zoom: int = None) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∫–∞—Ä—Ç—ã
        
        Args:
            lat, lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            zoom: —É—Ä–æ–≤–µ–Ω—å –∑—É–º–∞
        
        Returns:
            URL –∫–∞—Ä—Ç—ã
        """
        if zoom is None:
            zoom = self.zoom
        
        return f"{self.base_url}?center={lat},{lon}&zoom={zoom}&size={self.width}x{self.height}&maptype=mapnik"
    
    def calculate_optimal_zoom(self, pickup_lat: float, pickup_lon: float,
                              destination_lat: float = None, destination_lon: float = None) -> int:
        """
        –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑—É–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        
        Args:
            pickup_lat, pickup_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            destination_lat, destination_lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        
        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑—É–º–∞
        """
        if not destination_lat or not destination_lon:
            return 15  # –î–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        from services.price_calculator import PriceCalculator
        distance = PriceCalculator.calculate_distance(
            pickup_lat, pickup_lon, destination_lat, destination_lon
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑—É–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if distance < 1:
            return 16  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
        elif distance < 5:
            return 15  # –ë–ª–∏–∑–∫–æ
        elif distance < 20:
            return 14  # –°—Ä–µ–¥–Ω–µ
        elif distance < 50:
            return 13  # –î–∞–ª–µ–∫–æ
        else:
            return 12  # –û—á–µ–Ω—å –¥–∞–ª–µ–∫–æ
    
    def save_map_to_cache(self, map_data: bytes, filename: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –∫—ç—à
        
        Args:
            map_data: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            filename: –∏–º—è —Ñ–∞–π–ª–∞
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            filepath = os.path.join(self.cache_dir, filename)
            with open(filepath, 'wb') as f:
                f.write(map_data)
            return filepath
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ –∫—ç—à: {e}")
            return ""
    
    def clear_cache(self, max_age_hours: int = 24):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞
        
        Args:
            max_age_hours: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å–∞—Ö
        """
        try:
            import time
            current_time = time.time()
            max_age_seconds = max_age_hours * 3600
            
            for filename in os.listdir(self.cache_dir):
                filepath = os.path.join(self.cache_dir, filename)
                if os.path.isfile(filepath):
                    file_age = current_time - os.path.getmtime(filepath)
                    if file_age > max_age_seconds:
                        os.remove(filepath)
                        print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫—ç—à–∞: {filename}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
